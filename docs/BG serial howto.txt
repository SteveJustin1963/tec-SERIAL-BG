There are two ports of your choosing/wiring
One is a data in and out
The other is settings.
By default, it's 9600bps 1 start bit, no parity, 2 stop bits
The settings register selects 115200bps and also if you want an interrupt triggered on rx

Just write to the port
It'll auto send the byte
Or read the last bite received
There's also bits to indicate if a new byte has arrived
The bit settings should be in one of the posts

and whatever you solder to
if you solder to 4 and 5, then 4 and 5

so its all through two ports
the group wanted to keep address space for rom and ram and use ports for IO
after a fresh power up, writing to port C (IIRC) will send out whatever you write to that port
send an ascii 'U' and an ascii U will appear in the terminal
if terminal sends a byte back, it'll be in port C ready to be read
port B is the status and control register. In here you can test if a bit is sent, a bit has arrived and the baud rate
correction, looking at the code:
DataWrite <= '0' when PortB='0' and WR='0' else '1'; RXRead <= '0' 
when PortB='0' and WR='1' else '1'; StatRead <= '0' when PortC='0' and WR='1' else '1'; StatWrite <= '0' when PortC='0' and WR='0' else '1';
reading the status register, port C:
Statread='0' then D(0)<=TXBUSY; --1= buffer ready, 0=in use D(1)<=RXFull;--1=byte ready to be read, 0=no new data

writing to the status register:
CLKslowFast<=D(0); IntEn <=D(1);
Ok, so there is no address space mapped to the serial board
its all through ports
as in, IN A,(xx) and Out (xx),A

the first version was address mapped but it was decided to move it all to IO
Port A, B and C are on the serial board

you can wire that up to whatever you like

